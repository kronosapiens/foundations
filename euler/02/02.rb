# https://projecteuler.net/problem=2

# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

require 'benchmark'

class FindFib

  def self.sum_less_than(num)
    prev_fib = 1
    fib = 2
    fib_array = []

    while fib < num do
      fib_array << fib if fib % 2 == 0
      fib = fib + prev_fib
      prev_fib = fib - prev_fib
    end

    fib_array.inject(0) {|product, num| product += num}
  end

  def self.fib(n)
    case n
    when 0
      1
    when 1
      1
    else
      fib(n-1) + fib(n-2)
    end
  end

end

puts Benchmark.measure {puts FindFib.sum_less_than(4000000) }

# [1] pry(main)> load '02.rb'
# 4613732
#   0.000000   0.000000   0.000000 (  0.000065)
# => true


